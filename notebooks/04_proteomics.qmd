# Prepare comet search database

```{python}
#| label: import-python
import polars as pl
from src.single_cell import SingleCell
```

```{python}
#| label: import-lr_bulk
lr_bulk = SingleCell("results/long_read/pbid_filtered_analyzed.h5ad")
```

```{bash}
grep "^>" Homo_sapiens.GRCh38.pep.all_clean.fa > Homo_sapiens.GRCh38.pep.all_clean.txt
```

```{python}
#| label: add-is_in_pep_list
pep_list = pl.read_csv("Homo_sapiens.GRCh38.pep.all_clean.txt", new_columns=["ensembl_ID"])\
    .with_columns(
        pl.col("ensembl_ID").str.replace(">", "")
    )

lr_bulk.var = lr_bulk.var\
    .with_columns(
        is_in_pep_list = pl.col("associated_transcript").is_in(pep_list)
    )
```

```{python}
#| label: add-CPAT_label
CPAT_res = pl.read_csv("full_CPC2result.txt", separator="\t")\
    .rename({"#ID": "pbid", "label": "CPAT_label"})

lr_bulk.var = lr_bulk.var\
    .join(CPAT_res["pbid", "CPAT_label"], how="left", on="pbid")
```

```{python}
#| label: write-novel_transcripts

lr_bulk.var\
    .filter(
        pl.col("structural_category2").is_in(["novel_not_in_catalog", "novel_in_catalog"]),
        pl.col("CPAT_label")=="coding"
    )["pbid"]\
    .to_frame()\
    .write_csv("novel_transcripts.txt", include_header=False)
```

99,822 novel transcripts code proteins as predicted by CPAT.

```{bash}
#| label: get-novel_transcripts-sequences
mamba activate patch_seq_spl

sed '/^>/ s/^\([^\.]*\.[^\.]*\.[^\.]*\)\..*$/\1/' full_nt.fasta.transdecoder.pep > full_nt.fasta.transdecoder_clean.pep

seqtk subseq full_nt.fasta.transdecoder_clean.pep novel_transcripts.txt > novel_transcripts.fasta
```

```{bash}
#| label: get-gencode-v39-proteome
wget https://ftp.ensembl.org/pub/release-105/fasta/homo_sapiens/pep/Homo_sapiens.GRCh38.pep.all.fa.gz

gunzip Homo_sapiens.GRCh38.pep.all.fa.gz
```

```{bash}
#| label: combine-two-fastas
sed '/^>/ s/^>\(.*transcript:\)\([^ ]*\)\(.*\)/>\2/' Homo_sapiens.GRCh38.pep.all.fa > Homo_sapiens.GRCh38.pep.all_clean.fa

cat Homo_sapiens.GRCh38.pep.all_clean.fa >> novel_transcripts.fasta
```

217,518 transcripts in the final search database.

# Run comet

```{bash}
#| label: submit-comit-job
sbatch scripts/submit_comet.sh
```

# Run percolator

```{bash}
#| label: submit_percolator
sbatch scripts/submit_percolator.sh
```

# Post-analysis

```{python}
import polars as pl
from src.single_cell import SingleCell
from src.ryp import r, to_r
```

```{python}
lr_bulk = SingleCell("results/long_read/pbid_filtered_analyzed.h5ad")
```

In `percolator_res`, each row is a unique combination of `PSMId` and `proteinIds`. 

```{python}
#| label: get-percolator-results
percolator_res = pl.read_csv("results/long_read/percolator.tsv", has_header=True, separator="\t")

percolator_res = percolator_res\
    .with_columns(
       proteinIds = percolator_res["proteinIds"].map_elements(lambda s: s.split(","))
    ).explode("proteinIds")\
    .filter(
        pl.col("q-value") < 0.05
    )
```

```{python}
#| label: annotate-validated-transcripts

PSMId_mapped_to_novel_transcripts_uniquely = percolator_res\
    .with_columns(is_known = pl.col("proteinIds").str.starts_with("ENST"))\
    .group_by("PSMId")\
    .agg(
        pl.col("is_known").sum()
    )\
    .filter(
        pl.col("is_known")==0
    )\
    .select("PSMId")

validated_pbids = percolator_res\
    .filter(
        pl.col("PSMId").is_in(PSMId_mapped_to_novel_transcripts_uniquely)
    )\
    .select("proteinIds").unique()

temp = lr_bulk.var\
    .with_columns(
        validated_protemics = pl.when(pl.col("structural_category2").is_in(["full-splice_match", "incomplete-splice_match"])).then(pl.col("associated_transcript").is_in(percolator_res["proteinIds"].unique())).otherwise(pl.col("pbid").is_in(validated_pbids))
    )\
    .select(["structural_category2", "CPAT_label", "coding", "validated_protemics"])\
    .with_columns(
        CPAT_label = pl.when(pl.col("CPAT_label")=="coding").then(True).otherwise(False),
    )\
    .rename({"coding": "TransDecoder_predicted"})\
    .group_by("structural_category2")\
    .sum()\
    .unpivot(index="structural_category2")

temp = temp.vstack(temp.group_by("structural_category2").sum().with_columns(variable=pl.lit("total")))\
    .cast({"variable": pl.Enum(["total", "CPAT_label", "TransDecoder_predicted", "validated_protemics"])})
```


```{python}
#| label: seaborn-visualize
import seaborn as sns
import matplotlib.pyplot as plt

fig, ax = plt.subplots()
sns.barplot(temp, x="structural_category2", y="value", hue="variable", ax=ax)
ax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha='right')
ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)
```

# Percentage of transcripts included in search database

```{python}
import os
from src.utils import read_gtf

genome_v39 = read_gtf("".join([os.getenv("GENOMIC_DATA_DIR"), "GENCODE/gencode.v39.annotation.gtf"]), attributes=["transcript_id", "transcript_type"])\
    .filter(
        pl.col("transcript_type")=="protein_coding",
        pl.col("feature")=="transcript"
    )
```

```{python}
pep_v39 = pl.read_csv("Homo_sapiens.GRCh38.pep.all.header.txt", separator=" ", columns=range(8), new_columns=["pep_id", "pep", "chr", "gene_id", "transcript_id", "gene_biotype", "transcript_biotype", "gene_symbol"])\
    .with_columns(
        pl.col("pep_id").str.replace(">", ""),
        pl.col("chr").str.replace("chromosome:GRCh38:", ""),
        pl.col("gene_id").str.replace("gene:", ""),
        pl.col("transcript_id").str.replace("transcript:", ""),
        pl.col("gene_biotype").str.replace("gene_biotype:", ""),
        pl.col("transcript_biotype").str.replace("transcript_biotype:", ""),
        pl.col("gene_symbol").str.replace("gene_symbol:", "")
    )
```

```{python}
genome_v39\
    .join(pep_v39["transcript_id", "pep_id"], how="left", on="transcript_id")\
    .filter(pl.col("pep_id").is_null())
```
```{python}
comet_database_header = pl.read_csv("comet_database_header.txt", new_columns=["pbid"])\
    .with_columns(
        pl.col("pbid").str.replace(">", "")
    )
```

## WHat is the percentage of ENST IDs included in the comet search database?

```{python}
comet_database_header.filter(pl.col("pbid").str.contains("ENST"))
```

```{python}
lr_bulk.var\
    .cast({"associated_transcript": pl.String})\
    .filter(
        pl.col("associated_transcript").str.contains("ENST"),
        pl.col("associated_transcript").is_in(pep_v39["transcript_id"])
    )
```

```{python}
lr_bulk.var\
    .cast({"associated_transcript": pl.String})\
    .filter(
        pl.col("associated_transcript").str.contains("ENST"),
        pl.col("associated_transcript").is_in(pep_v39["transcript_id"]).not_()
    )
```

117,909 ENST IDs in total

```{python}
lr_bulk.var["associated_transcript"].is_in(comet_database_header.filter(pl.col("pbid").str.contains("ENST"))).sum()
```

77,628 (65%) ENST IDs are included in the comet search database.

WHat is the percentage of novel PB IDs included in the comet search database?

```{python}
lr_bulk.var\
    .filter(
        pl.col("structural_category2").is_in(["novel_not_in_catalog", "novel_in_catalog"])
    )
```

115,478 novel PB IDs in total

```{python}
lr_bulk.var\
    .filter(
        pl.col("orf_type").is_not_null() & pl.col("structural_category2").is_in(["novel_not_in_catalog", "novel_in_catalog"])
    )
```

106,968 novel PB IDs (92%) that are included in the comet search database. Only including PB IDs that passed the transdecoder filtering criteria, could be incomplete.