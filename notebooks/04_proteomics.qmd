# Prepare comet search database

## Get annotated transcript from Homo_sapiens.GRCh38.pep.all_clean.fa
```{python}
#| label: import-python
import polars as pl
from src.single_cell import SingleCell
import polars.selectors as cs
from src.ryp import to_r, r, to_py

lr_bulk = SingleCell("results/long_read/pbid_filtered_analyzed.h5ad")
```

```{bash}

grep "^>" Homo_sapiens.GRCh38.pep.all_clean.fa > Homo_sapiens.GRCh38.pep.all_clean.txt
```

```{python}
#| label: add-is_in_pep_list
pep_list = pl.read_csv("Homo_sapiens.GRCh38.pep.all_clean.txt", new_columns=["ensembl_ID"])\
    .with_columns(
        pl.col("ensembl_ID").str.replace(">", "")
    )

lr_bulk.var = lr_bulk.var\
    .with_columns(
        is_in_pep_list = pl.col("associated_transcript").is_in(pep_list)
    )
```

```{python}
#| label: add-CPAT_label
CPAT_res = pl.read_csv("full_CPC2result.txt", separator="\t")\
    .rename({"#ID": "pbid", "label": "CPAT_label"})

lr_bulk.var = lr_bulk.var\
    .join(CPAT_res["pbid", "CPAT_label"], how="left", on="pbid")
```

```{python}
#| label: write-novel_transcripts

lr_bulk.var\
    .filter(
        pl.col("structural_category2").is_in(["novel_not_in_catalog", "novel_in_catalog"]),
        pl.col("CPAT_label")=="coding"
    )["pbid"]\
    .to_frame()\
    .write_csv("novel_transcripts.txt", include_header=False)
```

99,822 novel transcripts code proteins as predicted by CPAT.

```{bash}
#| label: get-novel_transcripts-sequences
mamba activate patch_seq_spl

sed '/^>/ s/^\([^\.]*\.[^\.]*\.[^\.]*\)\..*$/\1/' full_nt.fasta.transdecoder.pep > full_nt.fasta.transdecoder_clean.pep

seqtk subseq full_nt.fasta.transdecoder_clean.pep novel_transcripts.txt > novel_transcripts.fasta
```

```{bash}
#| label: get-gencode-v39-proteome
wget https://ftp.ensembl.org/pub/release-105/fasta/homo_sapiens/pep/Homo_sapiens.GRCh38.pep.all.fa.gz

gunzip Homo_sapiens.GRCh38.pep.all.fa.gz
```

```{bash}
#| label: combine-two-fastas
sed '/^>/ s/^>\(.*transcript:\)\([^ ]*\)\(.*\)/>\2/' Homo_sapiens.GRCh38.pep.all.fa > Homo_sapiens.GRCh38.pep.all_clean.fa

cat Homo_sapiens.GRCh38.pep.all_clean.fa >> novel_transcripts.fasta
```

217,518 transcripts in the final search database.

## Get annotated transcripts from TransDecoder-predicted aa sequence

Instead of combining `Homo_sapiens.GRCh38.pep.all_clean.fa` with aa sequences for novel transcripts from `full_nt.fasta.transdecoder.pep`, just use `full_nt.fasta.transdecoder.pep` as a whole as the search database for comet.

```{python}
#| label: import-python
import polars as pl
from src.single_cell import SingleCell

lr_bulk = SingleCell("results/long_read/pbid_filtered_analyzed.h5ad")
```

```{bash}
#| label: submit-comet
sbatch scripts/submit_come_2.sh
```

```{bash}
#| label: submit-percolator
sbatch scripts/submit_percolator_2.sh
```

```{python}
#| label: get-percolator-results
percolator_res = pl.read_csv("results/long_read/percolator_2.tsv", has_header=True, separator="\t")

percolator_res = percolator_res\
    .with_columns(
       proteinIds = percolator_res["proteinIds"].map_elements(lambda s: s.split(","))
    ).explode("proteinIds")\
    .filter(
        pl.col("q-value") < 0.05
    )
```

```{python}
CPAT_res = pl.read_csv("full_CPC2result.txt", separator="\t")\
    .rename({"#ID": "pbid", "label": "CPAT_label"})

known_transcripts = lr_bulk.var.cast({"associated_transcript": pl.String}).filter(pl.col("associated_transcript").str.starts_with("ENST"))["pbid"].unique()

PSMId_mapped_to_novel_transcripts_uniquely = percolator_res\
    .with_columns(is_known = pl.col("proteinIds").is_in(known_transcripts))\
    .group_by("PSMId")\
    .agg(
        pl.col("is_known").sum()
    )\
    .filter(
        pl.col("is_known")==0
    )\
    .select("PSMId")

validated_pbids = percolator_res\
    .filter(
        pl.col("PSMId").is_in(PSMId_mapped_to_novel_transcripts_uniquely)
    )\
    .select("proteinIds").unique()

lr_bulk.var = lr_bulk.var\
    .join(CPAT_res["pbid", "CPAT_label"], how="left", on="pbid")\
    .with_columns(
        in_any_PSMs = pl.col("associated_transcript").is_in(percolator_res["proteinIds"].unique()) | pl.col("pbid").is_in(percolator_res["proteinIds"].unique()),
        in_novel_only_PSMs = pl.col("pbid").is_in(validated_pbids)
    )\
    .with_columns(
        CPAT_label = pl.when(pl.col("CPAT_label")=="coding").then(True).otherwise(False),
        validated_proteomics = pl.when(pl.col("structural_category2").is_in(["novel_not_in_catalog", "novel_in_catalog"]))\
            .then(pl.col("in_novel_only_PSMs")).otherwise(pl.col("in_any_PSMs"))
    )
```

```{python}
#| label: visualize-prep
temp = lr_bulk.var\
    .select(["structural_category2", "CPAT_label", "coding", "validated_proteomics"])\
    .rename({"coding": "TransDecoder_predicted"})\
    .group_by("structural_category2")\
    .sum()\
    .unpivot(index="structural_category2")

temp = temp.vstack(temp.group_by("structural_category2").sum().with_columns(variable=pl.lit("total")))\
    .cast({"variable": pl.Enum(["total", "CPAT_label", "TransDecoder_predicted", "validated_proteomics"])})
```

```{python}
#| label: seaborn-visualize
fig, ax = plt.subplots()
sns.barplot(temp, x="structural_category2", y="value", hue="variable", ax=ax)
ax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha='right')
ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)
```

# Run comet

```{bash}
#| label: submit-comit-job
sbatch scripts/submit_comet.sh
```

# Run percolator

```{bash}
#| label: submit_percolator
sbatch scripts/submit_percolator.sh
```

# Post-analysis

```{python}
#| label: import-python

lr_bulk = SingleCell("results/long_read/pbid_filtered_analyzed.h5ad")
```

In `percolator_res`, each row is a unique combination of `PSMId` and `proteinIds`. 

```{python}
#| label: get-percolator-results
percolator_res = pl.read_csv("results/long_read/percolator_2.tsv", has_header=True, separator="\t")

percolator_res = percolator_res\
    .with_columns(
       proteinIds = percolator_res["proteinIds"].map_elements(lambda s: s.split(","))
    ).explode("proteinIds")\
    .filter(
        pl.col("q-value") < 0.05
    )
```

```{python}
#| label: annotate-validated-transcripts
CPAT_res = pl.read_csv("full_CPC2result.txt", separator="\t")\
    .rename({"#ID": "pbid", "label": "CPAT_label"})

PSMId_mapped_to_novel_transcripts_uniquely = percolator_res\
    .with_columns(is_known = pl.col("proteinIds").str.starts_with("ENST"))\
    .group_by("PSMId")\
    .agg(
        pl.col("is_known").sum()
    )\
    .filter(
        pl.col("is_known")==0
    )\
    .select("PSMId")

validated_pbids = percolator_res\
    .filter(
        pl.col("PSMId").is_in(PSMId_mapped_to_novel_transcripts_uniquely)
    )\
    .select("proteinIds").unique()

lr_bulk.var = lr_bulk.var\
    .join(CPAT_res["pbid", "CPAT_label"], how="left", on="pbid")\
    .with_columns(
        in_any_PSMs = pl.col("associated_transcript").is_in(percolator_res["proteinIds"].unique()) | pl.col("pbid").is_in(percolator_res["proteinIds"].unique()),
        in_novel_only_PSMs = pl.col("pbid").is_in(validated_pbids),
        total = pl.lit(True)
    )\
    .with_columns(
        CPAT_label = pl.when(pl.col("CPAT_label")=="coding").then(True).otherwise(False),
        validated_proteomics = pl.when(pl.col("structural_category2").is_in(["novel_not_in_catalog", "novel_in_catalog"]))\
            .then(pl.col("in_novel_only_PSMs")).otherwise(pl.col("in_any_PSMs"))
    )
```

```{python}
#| label: visualize-prep

variable_dict = {
    "total": "Total",
    "at_least_one_orf": "At least one ORF",
    "validatable_orf": "Validatable ORF",
    "validated_proteomics": "Validated by proteomics"
}

structural_category2_dict = {
    "novel_not_in_catalog": "NNC",
    "novel_in_catalog": "NIC",
    "full-splice_match": "FSM",
    "incomplete-splice_match": "ISM",
    "Other": "Other"
}

temp = lr_bulk.var\
    .with_columns(
        protein_coding = pl.when(pl.col("structural_category").is_in(["full-splice_match", "incomplete-splice_match"])).then(pl.col("transcript_type")=="protein_coding").otherwise(pl.col("at_least_one_orf")),
        validatable_orf = pl.col("validatable_orf") & (pl.col("ORF_type")=="complete")
    )\
    .select(["structural_category2", "total", "at_least_one_orf", "validatable_orf", "validated_proteomics"])\
    .group_by("structural_category2")\
    .sum()\
    .unpivot(index="structural_category2")\
    .cast({"variable": pl.Enum(["total", "at_least_one_orf", "validatable_orf", "validated_proteomics"])})\
    .with_columns(
        variable = pl.col("variable").map_elements(lambda s: variable_dict[s]),
        structural_category2 = pl.col("structural_category2").map_elements(lambda s: structural_category2_dict[s])
    )\
    .cast({"structural_category2": pl.Enum(["FSM", "ISM", "NIC", "NNC", "Other"])})
```

```{python}
#| label: seaborn-visualize
import matplotlib.pyplot as plt
import seaborn as sns

fig, ax = plt.subplots()
sns.barplot(temp, x="structural_category2", y="value", hue="variable", ax=ax)
ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)
ax.set_xlabel("Structural Category")
ax.set_ylabel("Number of transcripts")
```

Abuandance of novel transcripts validated by proteomics

```{python}
novel_bulk = lr_bulk\
    .filter_var(
        pl.col("structural_category2").is_in(["novel_not_in_catalog", "novel_in_catalog"])
    )

temp = novel_bulk\
    .CPM()\
    .to_frame()\
    .drop("pbid")\
    .with_columns(
        (cs.all() + 1).log(2)
    )\
    .mean_horizontal()\
    .to_frame()\
    .hstack(
        novel_bulk.var\
            .with_columns(
                in_any_PSMs = pl.when(pl.col("in_any_PSMs") & pl.col("in_novel_only_PSMs").not_()).then(True).otherwise(False)
            )\
            .select(
                ["in_any_PSMs", "in_novel_only_PSMs"]
            )
    )\
    .with_columns(
        transcriptomics_only = pl.col("in_any_PSMs").not_() & pl.col("in_novel_only_PSMs").not_()
    )

variable_dict = {
    "in_any_PSMs": "In any PSMs",
    "in_novel_only_PSMs": "Proteomics",
    "transcriptomics_only": "Transcriptomics"
}

temp = temp\
    .unpivot(on=["in_any_PSMs", "in_novel_only_PSMs", "transcriptomics_only"], index="mean").filter(pl.col("value"))\
    .cast({"variable": pl.Enum(["in_novel_only_PSMs", "transcriptomics_only", "in_any_PSMs"])})

to_r(temp, "temp")    
```

```{r}
library(dplyr)
library(ggplot2)

temp %>% 
    ggplot(aes(x=mean, fill=variable)) +
    geom_histogram(position=position_fill(), alpha=.75, bins=10) +
    labs(x="log2(CPM + 1)", y="Proportion of transcripts validated by MS/MS") + 
    ggtitle("Novel transcripts")
```

Abundance of known transcripts validated by proteomics

```{python}
known_bulk = lr_bulk\
    .filter_var(
        pl.col("structural_category2").is_in(["full-splice_match"])
    )

temp = known_bulk\
    .CPM()\
    .to_frame()\
    .drop("pbid")\
    .with_columns(
        (cs.all() + 1).log(2)
    )\
    .mean_horizontal()\
    .to_frame()\
    .hstack(known_bulk.var.select(["validated_proteomics"]))

to_r(temp, "temp")    
```

```{r}
temp %>% 
    ggplot(aes(x=mean, fill=validated_proteomics)) +
    geom_histogram(position=position_fill(), alpha=.75, bins=10) +
    labs(x="log2(CPM + 1)", y="Proportion of transcripts validated by MS/MS") + 
    ggtitle("Known transcripts")
```

# Percentage of transcripts included in search database

```{python}
import os
from src.utils import read_gtf

genome_v39 = read_gtf("".join([os.getenv("GENOMIC_DATA_DIR"), "GENCODE/gencode.v39.annotation.gtf"]), attributes=["transcript_id", "transcript_type"])\
    .filter(
        pl.col("transcript_type")=="protein_coding",
        pl.col("feature")=="transcript"
    )
```

```{python}
pep_v39 = pl.read_csv("Homo_sapiens.GRCh38.pep.all.header.txt", separator=" ", columns=range(8), new_columns=["pep_id", "pep", "chr", "gene_id", "transcript_id", "gene_biotype", "transcript_biotype", "gene_symbol"])\
    .with_columns(
        pl.col("pep_id").str.replace(">", ""),
        pl.col("chr").str.replace("chromosome:GRCh38:", ""),
        pl.col("gene_id").str.replace("gene:", ""),
        pl.col("transcript_id").str.replace("transcript:", ""),
        pl.col("gene_biotype").str.replace("gene_biotype:", ""),
        pl.col("transcript_biotype").str.replace("transcript_biotype:", ""),
        pl.col("gene_symbol").str.replace("gene_symbol:", "")
    )
```

```{python}
genome_v39\
    .join(pep_v39["transcript_id", "pep_id"], how="left", on="transcript_id")\
    .filter(pl.col("pep_id").is_null())
```
```{python}
comet_database_header = pl.read_csv("comet_database_header.txt", new_columns=["pbid"])\
    .with_columns(
        pl.col("pbid").str.replace(">", "")
    )
```

## WHat is the percentage of ENST IDs included in the comet search database?

```{python}
comet_database_header.filter(pl.col("pbid").str.contains("ENST"))
```

```{python}
lr_bulk.var\
    .cast({"associated_transcript": pl.String})\
    .filter(
        pl.col("associated_transcript").str.contains("ENST"),
        pl.col("associated_transcript").is_in(pep_v39["transcript_id"])
    )
```

```{python}
lr_bulk.var\
    .cast({"associated_transcript": pl.String})\
    .filter(
        pl.col("associated_transcript").str.contains("ENST"),
        pl.col("associated_transcript").is_in(pep_v39["transcript_id"]).not_()
    )
```

117,909 ENST IDs in total

```{python}
lr_bulk.var["associated_transcript"].is_in(comet_database_header.filter(pl.col("pbid").str.contains("ENST"))).sum()
```

77,628 (65%) ENST IDs are included in the comet search database.

WHat is the percentage of novel PB IDs included in the comet search database?

```{python}
lr_bulk.var\
    .filter(
        pl.col("structural_category2").is_in(["novel_not_in_catalog", "novel_in_catalog"])
    )
```

115,478 novel PB IDs in total

```{python}
lr_bulk.var\
    .filter(
        pl.col("orf_type").is_not_null() & pl.col("structural_category2").is_in(["novel_not_in_catalog", "novel_in_catalog"])
    )
```

106,968 novel PB IDs (92%) that are included in the comet search database. Only including PB IDs that passed the transdecoder filtering criteria, could be incomplete.