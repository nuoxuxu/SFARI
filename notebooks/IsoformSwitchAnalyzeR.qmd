# Preparation

```{python}
#| label: import-python
import polars as pl
import polars.selectors as cs
from src.ryp import r, to_r, to_py, set_config
from src.single_cell import SingleCell
from src.utils import read_gtf
```

```{r}
#| label: import-r
library(IsoformSwitchAnalyzeR)
library(tidyverse)
library(ggpubr)
library(pheatmap)
library(RColorBrewer)
library(stringr)
library(scales)
library(dplyr)
```

# Build IsoformSwitchList object

Get filtered isoform count matrix

```{python}
#| label: get-Isoseq_Expression
lr_bulk = SingleCell("results/long_read/pbid_filtered.h5ad")

Isoseq_Expression = lr_bulk.to_frame().rename({"pbid": "isoform_id"})

to_r(Isoseq_Expression, "Isoseq_Expression")
Isoseq_Expression.write_csv("results/long_read/Isoseq_Expression.csv")
```

```{r}
#| label: get-myDesign
sampleID <- colnames(Isoseq_Expression)[c(-1)]
time_point <- str_split(sampleID, "_", 2) %>% map_chr(~ .x[1])
time_point <- factor(time_point, levels = c("iPSC", "NPC", "CN"))
myDesign <- data.frame(
    sampleID = sampleID,
    condition = time_point
)
```

```{python}
#| label: get-isoformExonAnnoation
pl.read_csv(
    "proc/merged_collapsed.sorted.gff", separator = "\t",
    comment_prefix = "##", has_header=False, 
    new_columns=["seqid", "source", "type", "start", "end", "score", "strand", "phase", "attributes"]).with_columns(
        pl.col("attributes").str.extract(r'transcript_id "([^;]*)";').alias("pbid")
    )\
    .filter(
        pl.col("pbid").is_in(Isoseq_Expression["isoform_id"])
    )\
    .drop("pbid")\
    .write_csv("proc/isoformExonAnnoation.gtf", separator="\t", include_header=False, quote_style="never")
```

```{r}
#| label: create-IsoseqsSwitchList
IsoseqsSwitchList <- importRdata(
    isoformCountMatrix = Isoseq_Expression,
    designMatrix = myDesign,
    isoformExonAnnoation = "proc/isoformExonAnnoation.gtf",
    isoformNtFasta = "SQANTI3_qc_corrected.fasta",
    addAnnotatedORFs = FALSE,
    fixStringTieAnnotationProblem = FALSE
)
saveRDS(IsoseqsSwitchList, "results/long_read/IsoseqsSwitchList.rds")
```

# IsoformSwitchAnalysis

Run IsoformSwitchAnalyzeR prefilter because running DEXSeq is computationally expensive

```{r}
#| label: preFilter
IsoseqsSwitchList_filtered <- preFilter(
    switchAnalyzeRlist         = IsoseqsSwitchList,
    geneExpressionCutoff       = 1, # default
    isoformExpressionCutoff    = 0, # default
    IFcutoff                   = 0.01, # default
    removeSingleIsoformGenes   = TRUE, # default
    reduceToSwitchingGenes     = FALSE, # default (we didn"t run DEXSeq yet)
    keepIsoformInAllConditions = TRUE # we only have 2 conditions so doesn"t matter
)
saveRDS(IsoseqsSwitchList_filtered, "results/long_read/IsoseqsSwitchList_filtered.rds")
```

```{r}
#| label: isoformSwitchTestDEXSeq
IsoseqsSwitchList <- isoformSwitchTestDEXSeq(
    switchAnalyzeRlist = IsoseqsSwitchList,
    reduceToSwitchingGenes = FALSE
)
```

```{bash}
sbatch -J isoformSwitchTestDEXSeq -o slurm_logs/isoformSwitchTestDEXSeq.out -t 0-4:0 -N 1 -n 1 --wrap="/home/s/shreejoy/nxu/miniforge3/envs/patch_seq_spl/bin/Rscript scripts/isoformSwitchTestDEXSeq.R"
```

# Analyze Alternative Splicing

For downstream analyses, we need all isoforms to be labeled with alternative splicing consequences

```{bash}
#| label: analyzeAlternativeSplicing
sbatch -t 0-6:0 -N 1 -n 1 -J full_analyzeAlternativeSplicing -o slurm_logs/full_analyzeAlternativeSplicing.out --wrap="/home/s/shreejoy/nxu/miniforge3/envs/patch_seq_spl/bin/Rscript scripts/full_analyzeAlternativeSplicing.R"
```

# Analyze Open Reading Frames

```{python}
#| label: write-addORFfromGTF.gtf
gencode_v39 = read_gtf("/project/s/shreejoy/Genomic_references/GENCODE/gencode.v39.annotation.gtf", attributes = ["transcript_id", "gene_id", "gene_name", "gene_type", "transcript_type"])\
    .filter(pl.col("feature").is_in(["exon", "CDS"]))

pbid_to_transcript_id = lr_bulk\
    .filter_var(pl.col("structural_category") == "full-splice_match")\
    .var["pbid", "associated_transcript"]\
    .rename({"associated_transcript": "transcript_id"})\
    .cast({"transcript_id": pl.String})

pbid_to_transcript_id\
    .join(gencode_v39, on = "transcript_id", how = "inner")\
    .with_columns(
        gene_id = pl.col("pbid").cast(pl.String).map_elements(lambda x: x.rsplit(".", 1)[0], return_dtype=pl.String)
    )\
    .with_columns(
        attributes = pl.lit('gene_name "') + pl.col("gene_name") + pl.lit('"; transcript_id "') + pl.col("pbid") + pl.lit('"; gene_id "') + pl.col("gene_id") + pl.lit('"; gene_type "') + pl.col("gene_type") + pl.lit('"; transcript_type "') + pl.col("transcript_type") + pl.lit('";')
    )\
    .select("seqname","source","feature","start","end","score","strand","frame","attributes")\
    .write_csv("addORFfromGTF.gtf", quote_style = "never", separator = "\t", include_header = False)
```

```{r}
#| label: analyze-known-isoforms-orf
IsoseqsSwitchList <- addORFfromGTF(
    IsoseqsSwitchList,
    overwriteExistingORF=TRUE,
    "addORFfromGTF.gtf")
```

```{r}
#| label: analyze-novel-isoforms-orf
library("BSgenome.Hsapiens.UCSC.hg38")
bsg <- BSgenome.Hsapiens.UCSC.hg38

IsoseqsSwitchList <- analyzeNovelIsoformORF(
    IsoseqsSwitchList,
    TRUE,
    bsg,
    minORFlength = 0
)
```

# External sequence analysis

## Coding potential

```{r}
#| label: get-pbid_list
unique(IsoseqsSwitchList$isoformFeatures$isoform_id) %>%
    writeLines("full_pbid_list.txt")
```

```{bash}
#| label: seqkit
seqkit grep -f full_pbid_list.txt SQANTI3_qc_corrected.fasta > full_cpc2.fasta
```

```{bash}
#| label: run-CPC2
cd ~/tools
wget https://github.com/gao-lab/CPC2_standalone/archive/refs/tags/v1.0.1.tar.gz
cd CPC2-beta
export CPC_HOME="$PWD"
cd libs/libsvm
gzip -dc libsvm-3.18.tar.gz | tar xf -
cd libsvm-3.18
make clean && make
cd $CPC_HOME && python ./bin/CPC2.py -i /scratch/s/shreejoy/nxu/SFARI/cpc2.fasta -o /scratch/s/shreejoy/nxu/SFARI/full_CPC2result.txt
```

```{r}
#| label: analyzeCPC2
IsoseqsSwitchList <- analyzeCPC2(
    IsoseqsSwitchList,
    "full_CPC2result.txt",
    removeNoncodinORFs = TRUE
)
```

```{r}
saveRDS(IsoseqsSwitchList, "results/long_read/IsoseqsSwitchList.rds")
```

## Pfam domain analysis

```{bash}
#| label: pfam_scan.pl

# Create environment
mamba create -n pfam_scan perl perl-moose perl-ipc-run hmmer
mamba activate pfam_scan

# Getting Pfam_scan
cd ~/tools
wget http://ftp.ebi.ac.uk/pub/databases/Pfam/Tools/PfamScan.tar.gz
tar -xvf PfamScan.tar.gz

# Setting up Pfam flat files
mkdir Pfam_flat_files
cd Pfam_flat_files 
wget http://ftp.ebi.ac.uk/pub/databases/Pfam/current_release/Pfam-A.hmm.dat.gz http://ftp.ebi.ac.uk/pub/databases/Pfam/current_release/Pfam-A.hmm.gz http://ftp.ebi.ac.uk/pub/databases/Pfam/current_release/active_site.dat.gz

gunzip Pfam_*.gz
hmmpress Pfam-A.hmm

# Getting Pfam_scan modules in the perl search path
export PERL5LIB=/home/s/shreejoy/nxu/tools/PfamScan:$PERL5LIB

# Running Pfam_scan
cd ${SCRATCH}/SFARI
/home/s/shreejoy/nxu/tools/PfamScan/pfam_scan.pl -fasta full_AA.fasta -dir /home/s/shreejoy/nxu/tools/Pfam_flat_files -cpu 40 -outfile pfam_scan_results.txt

sbatch scripts/pfam_scan.sh
```

```{r}
#| label: analyzePfam
IsoseqsSwitchList <- analyzePFAM(
    IsoseqsSwitchList,
    "pfam_scan_results.txt"
)
```

# Predict Isoform Switch consequences

```{r}
#| label: analyzeSwitchConsequences
consequencesOfInterest <- c('intron_retention','coding_potential','NMD_status','domains_identified','ORF_seq_similarity')

IsoseqsSwitchList <- analyzeSwitchConsequences(
    IsoseqsSwitchList,
    consequencesToAnalyze = consequencesOfInterest, 
    dIFcutoff = 0.1, # very high cutoff for fast runtimes - you should use the default (0.1)
    showProgress=FALSE
)
```

# Visualization

```{r}
#| label: load-IsoseqsSwitchList
IsoseqsSwitchList <- readRDS("results/long_read/full_analyzeAlternativeSplicing.rds")
```

## Add gene names

```{python}
to_r(lr_bulk.var["pbid", "associated_gene"], "pb_id_to_gene")
```

```{r}
IsoseqsSwitchList$isoformFeatures <- IsoseqsSwitchList$isoformFeatures %>% 
    dplyr::left_join(pb_id_to_gene, by = c("isoform_id" = "pbid")) %>% 
    mutate(gene_name = associated_gene) %>% 
    select(-associated_gene)
```

```{r}
switchPlot(
    IsoseqsSwitchList,
    condition1 = "CN",
    condition2 = "iPSC",
    isoform_id = c("PB.44.412", "PB.44.700"),
    IFcutoff = 0,
    dIFcutoff = 0
)
```

```{r}
extractSplicingSummary(
    IsoseqsSwitchList,
    asFractionTotal = FALSE,
    plotGenes=FALSE
)
```

```{python}
set_config(plot_width = 10, plot_height = 7)
r("extractSplicingEnrichment(IsoseqsSwitchList)")
```

```{python}
set_config(plot_width = 12, plot_height = 7)
r("extractSplicingEnrichmentComparison(IsoseqsSwitchList)")
```

```{python}
set_config(plot_width = 12, plot_height = 7)
r("extractSplicingGenomeWide(IsoseqsSwitchList)")
```

```{r}
extractSplicingSummary(
    IsoseqsSwitchList,
    asFractionTotal = FALSE,
    plotGenes=FALSE
)
```

# Garbage

```{python}
#| label: data-wrangling
CN_vs_iPSC = isoformSwitchAnalysis\
    .filter((pl.col("condition_1") == "CN") & (pl.col("condition_2") == "iPSC"))\
    .with_columns(pl.lit("CN_vs_iPSC").alias("comparison"))

# Do this for other comparisons: CN vs NPC, iPSC vs NPC
CN_vs_NPC = isoformSwitchAnalysis\
    .filter((pl.col("condition_1") == "CN") & (pl.col("condition_2") == "NPC"))\
    .with_columns(pl.lit("CN_vs_NPC").alias("comparison"))
iPSC_vs_NPC = isoformSwitchAnalysis\
    .filter((pl.col("condition_1") == "iPSC") & (pl.col("condition_2") == "NPC"))\
    .with_columns(pl.lit("iPSC_vs_NPC").alias("comparison"))

# combine all dataframes
isoformSwitchAnalysis = CN_vs_iPSC.vstack(CN_vs_NPC).vstack(iPSC_vs_NPC)\
    .drop(["condition_1", "condition_2"])
```

```{python}
#| label: add-structural-category
categories_to_show = ["full-splice_match", "incomplete-splice_match", "novel_in_catalog", "novel_not_in_catalog"]
classification = pl.read_parquet("proc/filtered_lite_classification.parquet").rename({"isoform": "pbid"})\
    .with_columns(
        pl.when(pl.col("structural_category").is_in(categories_to_show)).then(pl.col("structural_category")).otherwise(pl.lit("Other")).alias("structural_category2"))
isoformSwitchAnalysis = isoformSwitchAnalysis\
    .join(classification.rename({"pbid": "isoform_id"})["isoform_id", "structural_category2"], on = ["isoform_id"], how = "left")
to_r(isoformSwitchAnalysis, "isoformSwitchAnalysis")    
```

What are the distributions of structural categories for each comparison?

```{r}
isoformSwitchAnalysis %>%
    dplyr::filter(padj < 0.05) %>%
    group_by(comparison) %>%
    summarize(count = n())
```

```{r}
#| label: plot-comparison-structural-category
isoformSwitchAnalysis %>%
    dplyr::filter(padj < 0.05) %>%
    mutate(comparison = factor(comparison, levels = c("CN_vs_iPSC", "CN_vs_NPC", "iPSC_vs_NPC"))) %>%
    ggplot(aes(x = comparison, fill = structural_category2)) +
    geom_histogram(stat = "count")
```

Are DTU transcripts enriched for novel transcripts?

```{python}
#| label: pivot-tab
pivot_tab = isoformSwitchAnalysis\
    .with_columns(
        pl.when(pl.col("structural_category2").is_in(["full-splice_match"])).then(pl.col("structural_category2")).otherwise(pl.lit("Novel")).alias("structural_category3"),
        pl.when(pl.col("padj") < 0.05).then(pl.lit("DTU")).otherwise(pl.lit("Not DTU")).alias("DTU")
    )\
    .pivot(
        "DTU", index="structural_category3", values="DTU", aggregate_function="count"
    )
to_r(pivot_tab, "pivot_tab")
```

```{r}
#| label: chi2-test
pivot_tab <- as.data.frame(pivot_tab)
rownames(pivot_tab) <- pivot_tab$structural_category3
pivot_tab <- pivot_tab[, -1]
chi2 <- chisq.test(pivot_tab)
```

# Start here

```{r}
IsoseqsSwitchList <- readRDS("results/long_read/IsoseqsSwitchList_part_final.rds")
```

```{r}
#| label: analyzeSwitchConsequences
consequencesOfInterest <- c('intron_retention','coding_potential','NMD_status','domains_identified','ORF_seq_similarity')

IsoseqsSwitchList <- analyzeSwitchConsequences(
    IsoseqsSwitchList,
    consequencesToAnalyze = consequencesOfInterest, 
    dIFcutoff = 0.1, # very high cutoff for fast runtimes - you should use the default (0.1)
    showProgress=FALSE
)
saveRDS(IsoseqsSwitchList, "results/long_read/IsoseqsSwitchList_part_final_Analyzed.rds")
```

```{python}
IsoseqsSwitchList = to_py("IsoseqsSwitchList")
for key, value in IsoseqsSwitchList.items():
    globals()[key] = value
del key
del value    
```

# To-dos
- Merge the isoformSwitchAnalysis table with consequences of the switches
- Add gene names to the isoformSwitchAnalysis table
- Figure out how the consequences are calculated
- Add the switchplot to shinyapp
- Find examples of mutually exclusive events (MES)
- Prioritize calculating mRNA-level features
- Find examples of isoform switches for each consequence in SplicingEnrichment.png