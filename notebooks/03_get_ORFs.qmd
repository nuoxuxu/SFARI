# Run Transdecoder on full_nt.fasta

```{python}
import polars as pl
from src.ryp import r, to_py, to_r
from src.utils import read_gtf, read_gff
import polars.selectors as cs
from src.single_cell import SingleCell
```

Run transdecoder to generate ORFs

```{bash}
cd ~/tools
wget https://data.broadinstitute.org/Trinity/CTAT_SINGULARITY/MISC/TransDecoder/transdecoder.v5.7.1.simg

cd ${SCRATCH}/SFARI
module load apptainer
apptainer shell -B="/scratch/s/shreejoy/nxu/SFARI:/scratch/s/shreejoy/nxu/SFARI" ~/tools/transdecoder.v5.7.1.simg

TransDecoder.LongOrfs -S -t full_nt.fasta

makeblastdb -dbtype prot -in uniprotkb_proteome_UP000005640_AND_revi_2024_10_07.fasta

blastp -query full_nt.fasta.transdecoder_dir/longest_orfs.pep \
    -db uniprotkb_proteome_UP000005640_AND_revi_2024_10_07.fasta -max_target_seqs 1 \
    -outfmt 6 -evalue 1e-5 -num_threads 40 > blastp.outfmt6

hmmsearch --cpu 40 -E 1e-10 --domtblout pfam.domtblout Pfam-A.hmm full_nt.fasta.transdecoder_dir/longest_orfs.pep

TransDecoder.Predict --single_best_only -t full_nt.fasta --retain_pfam_hits pfam.domtblout --retain_blastp_hits blastp.outfmt6

/usr/local/bin/util/cdna_alignment_orf_to_genome_orf.pl \
     full_nt.fasta.transdecoder.gff3 \
     proc/merged_collapsed.filtered.gff3 \
     full_nt.fasta > full_nt.fasta.transdecoder.genome.gff3
```

Reformat the GFF3 file to include gene_id and transcript_id

```{python}
GFF3 = read_gff("full_nt.fasta.transdecoder.genome.gff3", attributes=["Parent"])

GFF3 = GFF3\
    .with_columns(
        pl.when(pl.col("type")=="mRNA").then(pl.col("Parent").str.split("^").map_elements(lambda s: s[0])).otherwise(pl.col("Parent").str.extract("^(.*)\.[^.]+$"))
    )\
    .with_columns(
        pl.when(pl.col("type")!= "mRNA").then(pl.col("Parent").str.extract("^(.*)\.[^.]+$")).otherwise(pl.col("Parent")).alias("gene_id"),
        pl.when(pl.col("type")=="mRNA").then(None).otherwise(pl.col("Parent")).alias("transcript_id")
    ).drop("Parent").drop_nulls("seqid")
```

```{python}
GFF3\
    .with_columns(
        attributes = pl.when(pl.col("type")=="mRNA").then(pl.lit('gene_id "') + pl.col("gene_id") + pl.lit('";')).otherwise(pl.lit('gene_id "') + pl.col("gene_id") + pl.lit('";') + pl.lit('transcript_id "') + pl.col("transcript_id") + pl.lit('";'))
    )\
    .select(["seqid", "source", "type", "start", "end", "score", "strand", "phase", "attributes"])\
    .write_csv("full_nt.fasta.transdecoder.genome_updated.gff3", quote_style = "never", separator = "\t", include_header = False)
```