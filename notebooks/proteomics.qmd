# Processing tandem mass spectrometry data

```{bash}
sbatch scripts/submit_comet.sh
```

```{bash}
ls data/tc-1154/*.pin | xargs -I {} tail -n +2 {} > pooled.pin
```

```{bash}
percolator pooled.pin > pooled.tsv
```

```{bash}
awk '{
    for (i = 1; i <= NF; i++) {
        if (i <= 5) {
            printf "%s\t", $i;
        } else {
            printf "%s%s", $i, (i < NF ? "," : "");
        }
    }
    printf "\n";
}' OFS="\t" pooled.pin > results/long_read/percolator.tsv

```

```{bash}
scp niagara:/scratch/s/shreejoy/nxu/SFARI/results/long_read/percolator.tsv results/long_read/percolator.tsv
```

# Data wrangling

```{python}
import polars as pl
from src.single_cell import SingleCell
```

```{python}
data = pl.read_csv("results/long_read/percolator.tsv", has_header=True, separator="\t")

data = data\
    .with_columns(
       proteinIds = data["proteinIds"].map_elements(lambda s: s.split(","))
    ).explode("proteinIds")\
    .filter(
        pl.col("q-value") < 0.05
    )
```

```{python}
lr_bulk = SingleCell("results/long_read/pbid_filtered.h5ad")
```

```{python}
data = data.rename({"proteinIds": "pbid"})\
    .join(lr_bulk.var["pbid", "structural_category2"], on = "pbid", how = "left")
```

# Start from here

```{python}
novel_ORFs = data.group_by("PSMId")\
    .agg(
        pl.col("pbid"),
        (pl.col("structural_category2")).unique()
    )\
    .filter(
        pl.col("structural_category2") == ["novel_not_in_catalog"]
    )
```

```{python}
lr_bulk.var = lr_bulk.var\
    .join(novel_ORFs.explode("pbid").unique("pbid").drop("structural_category2"), how = "left", on = "pbid")
```

```{python}
lr_bulk.var\
    .filter(
        pl.col("structural_category2").is_in(["novel_not_in_catalog"])
    ).shape[0]
```

```{python}
lr_bulk.var\
    .filter(
        pl.col("structural_category2").is_in(["novel_not_in_catalog", "novel_in_catalog"]),
        pl.col("PSMId").is_not_null()
    ).shape[0]
```

50.5% of the novel-not-in-catalog transcripts are supported by proteomics data.


```{python}
lr_bulk.var\
    .filter(
        pl.col("associated_gene").cast(pl.String).str.starts_with("novel"),
        pl.col("PSMId").is_not_null()
    )\
    .unique("associated_gene")
```