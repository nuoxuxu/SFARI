# Import packages

```{python}
#| label: import-python
import polars as pl
import polars.selectors as cs
from src.ryp import r, to_r
from src.single_cell import SingleCell
```

```{r}
#| label: import-r
library(ggpubr)
library(pheatmap)
library(RColorBrewer)
library(stringr)
library(scales)
library(dplyr)
```

# Visualization

```{r}
#| label: color-vec
colorVector <- c(
  "full-splice_match" = "#009E73",
  "incomplete-splice_match"   = "#0072B2",
  "novel_in_catalog"   = "#D55E00",
  "novel_not_in_catalog"   = "#E69F00",
  "Other" = "#000000"
)

colorVector <- c(
  "Known" = "#009E73",
  "ISM"   = "#0072B2",
  "NIC"   = "#D55E00",
  "NNC"   = "#E69F00",
  "Other" = "#000000"
)
```

## The number of detected genes

```{python}
#| label: gene-count
pacbio = pl.read_parquet("proc/gene_count_matrix.parquet")\
    .select(pl.selectors.numeric())\
    .sum(axis=0)\
    .transpose(include_header=True)\
    .rename({"column": "sample", "column_0": "total_count"})\
    .with_columns(pl.lit("SFARI").alias("Study"))
to_r(pacbio, "pacbio")
```

Note that loading the `Rdata` is quite slow. #TODO: Only load cts

```{r}
#| label: gene-count-plot
load("/Users/xunuo/projects/Dev_Brain_IsoSeq/data/working/bulkTxome.Rdata")
library_size <- cts %>%
  dplyr::select(matches("(_CP$|_VZ$)")) %>% 
  summarise_all(sum) %>% 
  t()
colnames(library_size) <- ("total_count")
as_tibble(library_size, rownames = "sample") %>% 
    mutate(Study = "Patowary et al., 2024") %>% 
    rbind(pacbio) %>% 
    ggplot(aes(x = sample, y = total_count, fill = Study)) +
    geom_bar(stat = "identity", position = "dodge") +
    theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
    scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6)) +
    xlab("Sample") +
    ylab("Total read count")
ggsave("figures/patowary_vs_SFARI_total_count.png")    
```

## Transcript-level analyses

### Prepare dataframe

```{python}
structural_category_labels = {"full-splice_match": "Known", "incomplete-splice_match": "ISM", "novel_in_catalog": "NIC", "novel_not_in_catalog": "NNC", "Other": "Other"}
lr_bulk = SingleCell("results/long_read/pbid_filtered.h5ad")

len_and_nexon = pl.read_csv(
    "proc/merged_collapsed.sorted.gff", separator = "\t",
    comment_prefix = "##", has_header=False, 
    new_columns=["seqid", "source", "type", "start", "end", "score", "strand", "phase", "attributes"]).with_columns(
        pl.col("attributes").str.extract(r'transcript_id "([^;]*)";').alias("pbid")
    )\
    .filter(pl.col("type") == "exon")\
    .with_columns(
        (pl.col("end") - pl.col("start")).alias("length")
    ).group_by("pbid")\
    .agg(
        pl.sum("length"),
        pl.len().alias("nexon")
    )

df = lr_bulk\
    .with_columns_var(
        counts = lr_bulk.X.sum(axis=0),
        n_unique_samples = (lr_bulk.X != 0).sum(axis=0),
        structural_category2 = pl.col("structural_category2").replace_strict(structural_category_labels)
    ).select_var(
        ["pbid", "structural_category2", "counts", "n_unique_samples", "ref_length", "ref_exons"]
    ).var

df = df.join(len_and_nexon, on="pbid", how="inner")

to_r(df, "df")
```

```{r}
df$structural_category2 <- factor(df$structural_category2, levels = c("Known", "ISM", "NIC", "NNC", "Other"))
```

### Transcripts Identified by Novelty

```{python}
summary_df = df\
    .group_by("structural_category2")\
    .agg(pl.count().alias("count"))\
    .with_columns(
        (pl.col("count") / pl.col("count").sum() * 100).alias("percentage")
    )

to_r(summary_df, "summary_df")
```

```{r}
summary_df$structural_category2 <- factor(summary_df$structural_category2, levels = c("Known", "ISM", "NIC", "NNC", "Other"))

summary_df %>% 
    ggplot(aes(x = structural_category2, y = count, fill = structural_category2)) +
    geom_bar(stat = "identity") +
    geom_text(aes(label = paste0(round(percentage, 1), "%")), vjust = 2, colour = "white", size = 5) +
    theme(axis.text.x = element_text(size = 18)) +
    labs(x = "Structural Category", y = "Percentage", title = "Transcripts Identified by Novelty") +
    scale_fill_manual("Structural Category", values=colorVector) +
    scale_y_continuous(labels = function(x) x/1000) +
    ylab("Transcripts (x 10^3)") +
    xlab(NULL)

ggsave("figures/transcripts_identified_by_novelty.png", width=7, height=4)
```

### Novelty vs abundance

```{r}
df %>% 
    filter(counts > 10) %>%
    ggplot(aes(x=counts, fill=structural_category2)) +
    geom_histogram(position=position_fill(), alpha=.75) +
    theme_bw() +
    scale_x_log10() +
    annotation_logticks(scaled = T, sides= "b") +
    theme(panel.grid.minor = element_blank()) + 
    labs(x="Min observed counts", y="Transcript proportion") + 
    ggtitle("Transcript novelty vs Abundance") + 
    theme(plot.title = element_text(hjust=.5)) + 
    scale_fill_manual("Structural Category", values=colorVector)
ggsave("figures/novelty_vs_abundance.png",width=5.5,height=3)
```

### Novelty vs number of unique samples

```{r}
df %>% 
    ggplot(aes(x=n_unique_samples, fill=structural_category2)) +
        geom_histogram(position=position_stack(), alpha=.75) +
        theme_bw() +
        scale_x_continuous(breaks=seq(1, 15, 1)) +
        scale_fill_manual(values=colorVector)
```

```{r}
df %>% 
    mutate(n_unique_samples = ifelse(n_unique_samples == 1, "private", "non-private")) %>%
        ggplot(aes(x=structural_category2, fill=n_unique_samples)) +
            geom_histogram(position=position_stack(), alpha=.75, stat="count") +
            theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
            theme_bw()
```

```{r}
df %>%
    ggplot(aes(x=counts, fill=structural_category2)) +
        geom_histogram() +
        scale_x_log10() +
        theme_bw()
```

```{python}
df.filter(pl.col("counts") > 3).shape[0] / df.shape[0]
```

### Transcript Novelty vs Length

```{r}
df %>%
  ggplot(aes(x=length, fill=structural_category2)) +
    geom_histogram(alpha=.75, bins = 80) +
    theme_bw() +
    scale_fill_manual(values=colorVector) +
    scale_x_continuous(trans = log10_trans(), breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)),limits = c(300,10^5)) +
    scale_y_continuous(labels = function(x) x/1000) +
    ylab("Transcripts (x 10^3)") +
    labs(x="Transcript Length (bp)") +
    ggtitle("Transcript length distribution")
ggsave("figures/novelty_vs_length.png", width=5.5, height=3, dpi = 300)
```

### Exon number

```{r}
df %>%
    ggplot(aes(x=nexon, fill=structural_category2)) +
    geom_histogram(alpha=.75, binwidth = 1) +
    theme_bw() + 
    xlim(1,40) + 
    scale_fill_manual(values=colorVector) + 
    labs(x="# Exons", y="# Transcripts") + 
    ggtitle('Exons per  Transcript') + 
    scale_y_continuous(labels = function(x) x/1000)
ggsave("figures/exon_number.png", width=5.5, height=4, dpi = 300)
```