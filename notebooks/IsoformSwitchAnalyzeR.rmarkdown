# Preparation



```{python}
#| label: import-python
import polars as pl
import polars.selectors as cs
from src.ryp import r, to_r, to_py
from src.single_cell import SingleCell
```

```{r}
#| label: import-r
library(IsoformSwitchAnalyzeR)
library(tidyverse)
library(ggpubr)
library(pheatmap)
library(RColorBrewer)
library(stringr)
library(scales)
library(dplyr)
```



# Build IsoformSwitchList object

Get filtered isoform count matrix



```{python}
#| label: get-Isoseq_Expression
lr_bulk = SingleCell("results/long_read/pbid_filtered.h5ad")

Isoseq_Expression = lr_bulk.to_frame().rename({"pbid": "isoform_id"})

to_r(Isoseq_Expression, "Isoseq_Expression")
```

```{r}
#| label: get-myDesign
sampleID <- colnames(Isoseq_Expression)[c(-1)]
time_point <- str_split(sampleID, "_", 2) %>% map_chr(~ .x[1])
myDesign <- data.frame(
    sampleID = sampleID,
    condition = time_point
)
```

```{python}
#| label: get-isoformExonAnnoation
pl.read_csv(
    "proc/merged_collapsed.sorted.gff", separator = "\t",
    comment_prefix = "##", has_header=False, 
    new_columns=["seqid", "source", "type", "start", "end", "score", "strand", "phase", "attributes"]).with_columns(
        pl.col("attributes").str.extract(r'transcript_id "([^;]*)";').alias("pbid")
    )\
    .filter(
        pl.col("pbid").is_in(Isoseq_Expression["isoform_id"])
    )\
    .drop("pbid")\
    .write_csv("proc/isoformExonAnnoation.gtf", separator="\t", include_header=False, quote_style="never")
```

```{r}
#| label: create-IsoseqsSwitchList
IsoseqsSwitchList <- importRdata(
    isoformCountMatrix = Isoseq_Expression,
    designMatrix = myDesign,
    isoformExonAnnoation = "proc/isoformExonAnnoation.gtf",
    isoformNtFasta = "SQANTI3_qc_corrected.fasta",
    addAnnotatedORFs = FALSE,
    fixStringTieAnnotationProblem = FALSE
)
saveRDS(IsoseqsSwitchList, "results/long_read/IsoseqsSwitchList.rds")
```



# Run isoformSwitchTestDEXSeq

Run IsoformSwitchAnalyzeR prefilter because running DEXSeq is computationally expensive



```{r}
#| label: preFilter
IsoseqsSwitchList <- readRDS("results/long_read/IsoseqsSwitchList.rds")
IsoseqsSwitchList <- preFilter(
switchAnalyzeRlist         = IsoseqsSwitchList,
geneExpressionCutoff       = 1, # default
isoformExpressionCutoff    = 0, # default
IFcutoff                   = 0.01, # default
removeSingleIsoformGenes   = TRUE, # default
reduceToSwitchingGenes     = FALSE, # default (we didn"t run DEXSeq yet)
keepIsoformInAllConditions = TRUE # we only have 2 conditions so doesn"t matter
)
```

```{r}
#| label: isoformSwitchTestDEXSeq
IsoseqsSwitchList_part1 <- isoformSwitchTestDEXSeq(
    switchAnalyzeRlist = IsoseqsSwitchList,
    reduceToSwitchingGenes = FALSE
)
saveRDS(IsoseqsSwitchList_part1, "proc/IsoseqsSwitchList_part1.rds")
```



# Start from here

Get `isoformSwitchAnalysis` object to a Polars Dataframe



```{r}
#| label: read-IsoseqsSwitchList_part1.rds
IsoseqsSwitchList <- readRDS("proc/IsoseqsSwitchList_part1.rds")
```



```{```{```{r}
r
```}
r
```}

```


```{python}
#| label: data-wrangling
CN_vs_iPSC = isoformSwitchAnalysis\
    .filter((pl.col("condition_1") == "CN") & (pl.col("condition_2") == "iPSC"))\
    .with_columns(pl.lit("CN_vs_iPSC").alias("comparison"))

# Do this for other comparisons: CN vs NPC, iPSC vs NPC
CN_vs_NPC = isoformSwitchAnalysis\
    .filter((pl.col("condition_1") == "CN") & (pl.col("condition_2") == "NPC"))\
    .with_columns(pl.lit("CN_vs_NPC").alias("comparison"))
iPSC_vs_NPC = isoformSwitchAnalysis\
    .filter((pl.col("condition_1") == "iPSC") & (pl.col("condition_2") == "NPC"))\
    .with_columns(pl.lit("iPSC_vs_NPC").alias("comparison"))

# combine all dataframes
isoformSwitchAnalysis = CN_vs_iPSC.vstack(CN_vs_NPC).vstack(iPSC_vs_NPC)\
    .drop(["condition_1", "condition_2"])
```

```{python}
#| label: add-structural-category
categories_to_show = ["full-splice_match", "incomplete-splice_match", "novel_in_catalog", "novel_not_in_catalog"]
classification = pl.read_parquet("proc/filtered_lite_classification.parquet").rename({"isoform": "pbid"})\
    .with_columns(
        pl.when(pl.col("structural_category").is_in(categories_to_show)).then(pl.col("structural_category")).otherwise(pl.lit("Other")).alias("structural_category2"))
isoformSwitchAnalysis = isoformSwitchAnalysis\
    .join(classification.rename({"pbid": "isoform_id"})["isoform_id", "structural_category2"], on = ["isoform_id"], how = "left")
to_r(isoformSwitchAnalysis, "isoformSwitchAnalysis")    
```

What are the distributions of structural categories for each comparison?

```{r}
isoformSwitchAnalysis %>%
    dplyr::filter(padj < 0.05) %>%
    group_by(comparison) %>%
    summarize(count = n())
```

```{r}
#| label: plot-comparison-structural-category
isoformSwitchAnalysis %>%
    dplyr::filter(padj < 0.05) %>%
    mutate(comparison = factor(comparison, levels = c("CN_vs_iPSC", "CN_vs_NPC", "iPSC_vs_NPC"))) %>%
    ggplot(aes(x = comparison, fill = structural_category2)) +
    geom_histogram(stat = "count")
```

Are DTU transcripts enriched for novel transcripts?

```{python}
#| label: pivot-tab
pivot_tab = isoformSwitchAnalysis\
    .with_columns(
        pl.when(pl.col("structural_category2").is_in(["full-splice_match"])).then(pl.col("structural_category2")).otherwise(pl.lit("Novel")).alias("structural_category3"),
        pl.when(pl.col("padj") < 0.05).then(pl.lit("DTU")).otherwise(pl.lit("Not DTU")).alias("DTU")
    )\
    .pivot(
        "DTU", index="structural_category3", values="DTU", aggregate_function="count"
    )
to_r(pivot_tab, "pivot_tab")
```

```{r}
#| label: chi2-test
pivot_tab <- as.data.frame(pivot_tab)
rownames(pivot_tab) <- pivot_tab$structural_category3
pivot_tab <- pivot_tab[, -1]
chi2 <- chisq.test(pivot_tab)
```

## Analyzing Open Reading Frames

```{r}
library("BSgenome.Hsapiens.UCSC.hg38")
bsg <- BSgenome.Hsapiens.UCSC.hg38
```

```{r}
#| label: import-switchAnalyzeRlist
IsoseqsSwitchList_part1 <- readRDS("proc/IsoseqsSwitchList_part1.rds")
```

```{r}
#| label: addORFfromGTF
# addORFfromGTF(
#     IsoseqsSwitchList_part1,
#     "/project/s/shreejoy/Genomic_references/GENCODE/gencode.v39.annotation.gtf",
# )
```

```{bash}
sbatch -t 0-2:0 -N 1 -n 1 -J analyzeORF -o slurm_logs/analyzeR.out --wrap="~/miniforge3/envs/patch_seq_spl/bin/Rscript scripts/analyzeORF.R"
```

```{r}
IsoseqsSwitchList_part1_Analyzed <- readRDS("IsoseqsSwitchList_part1_Analyzed.rds")
```

```{bash}
sbatch -t 0-2:0 -N 1 -n 1 -J analyzeSwitchConsequences -o slurm_logs/analyzeSwitchConsequences.out --wrap="~/miniforge3/envs/patch_seq_spl/bin/Rscript scripts/analyzeSwitchConsequences.R"
```

# Part 2

```{r}
IsoseqsSwitchList_part1_Analyzed <- readRDS("IsoseqsSwitchList_part1_Analyzed.rds")

IsoseqsSwitchList_part1_Analyzed <- extractSequence(IsoseqsSwitchList_part1_Analyzed, bsg)

IsoseqsSwitchList_part1_Analyzed <- analyzeAlternativeSplicing(IsoseqsSwitchList_part1_Analyzed)
```

```{r}
saveRDS(IsoseqsSwitchList_part1_Analyzed, "IsoseqsSwitchList_part1_Analyzed_2.rds")
```

```{r}
consequencesOfInterest <- c('intron_retention','NMD_status','ORF_seq_similarity')

IsoseqsSwitchList_part1_Analyzed_Predicted <- analyzeSwitchConsequences(
    IsoseqsSwitchList_part1_Analyzed,
    consequencesToAnalyze = consequencesOfInterest,
    dIFcutoff = 0.4, # very high cutoff for fast runtimes - you should use the default (0.1)
    showProgress=FALSE
)
```

```{r}
IsoseqsSwitchList_part1_Analyzed_Predicted <- readRDS("IsoseqsSwitchList_part1_Analyzed_Predicted.rds")
```

```{r}
extractSwitchOverlap(
    IsoseqsSwitchList_part1_Analyzed_Predicted,
    filterForConsequences=TRUE,
    plotIsoforms = FALSE
)
```

```{r}
extractConsequenceEnrichment(
    IsoseqsSwitchList_part1_Analyzed_Predicted,
    consequencesToAnalyze='all',
    analysisOppositeConsequence = TRUE,
    localTheme = theme_bw(base_size = 14), # Increase font size in vignette
    returnResult = FALSE # if TRUE returns a data.frame with the summary statistics
)

```


```{r}
extractConsequenceEnrichment
```
